02/02/2025
1. Added basic function implementation.
2. Defined global variables.
3. Implemented printing an empty dungeon.
4. Created small foundational classes like emptyDungeon.

02/03/2025
1. Finalized dungeon generation.
2. Implemented room placement with randomized sizes.
3. Ensured proper spacing between rooms
4. Connected rooms with pathways (corridors) to avoid dead ends.
5. Implemented randomized stair placement.
6. Created a Makefile for easy compilation
7. Created a Readme file for description of the project.

02/10/2025
1. Refactored the main files by properly organizing extern variable declarations.
2. Ensured all global variables were correctly defined in dungeon_generation.c and declared in dungeon_generation.h.
3. Improved code structure by separating concerns between dungeon generation and save/load functionality.
4. Fixed several compilation errors related to incomplete struct definitions.
5. Validated successful compilation and functionality of dungeon generation after refactoring.

02/15/2025
1. Successfully implemented the dungeon-saving functionality.
2. Ensured that dungeon data, including rooms, staircases, and player position, were correctly written to the save file.
3. Fixed issues with incorrect file paths by properly constructing the .rlg327 directory path.
4. Verified that the save function writes dungeon data in the correct format, following the required specifications.

02/16/2025
1. Successfully implemented and debugged the dungeon-loading functionality.
2. Ensured that dungeon data was correctly read from the save file and reconstructed in memory.
3. Updated main.c to correctly handle the --load flag and pass the specified filename to loadDungeon().
4. Verified that loading restores the dungeon exactly as it was saved, including rooms, corridors, stairs, and player position.
5. Fully tested --save and --load functionality, ensuring the game state persists across runs.

02/24/2025
1. Implemented a min-heap to efficiently manage priority queue operations.
2. Verified that removal and other heap operations function correctly without errors.

02/25/2025
1. Completed Dijkstra's algorithm for tunneling monsters, ensuring they navigate based on terrain hardness values.
2. Finished the non-tunneling variant, restricting movement to open spaces while maintaining optimal pathfinding.
3. Updated the main program to integrate both pathfinding implementations and ensure correct execution.
4. Validated distance map outputs, confirming that both tunneling and non-tunneling calculations display correctly with accurate values.

03/06/2025
1. Defined core variables and data structures, including structs for `Monster` and `Room`.
2. Added an array for dungeon representation and monster tracking.

03/07/2025
1. Developed functionality for monster creation.
2. Implemented spawning logic for different monster types.
3. Added a switch to specify the number of monsters using `--nummon`.
4. Implemented core movement logic for monsters based on intelligence, telepathy, tunneling, and erratic behavior.

03/08/2025
1. Implemented player placement and movement within the dungeon.
2. Ensured monster behavior follows the specifications for intelligent, telepathic, and tunneling creatures.
3. Added game-over conditions and debugging output to track player interactions.


03/24/2025
1. Implemented full user interface with ncurses.
2. Player character now responds to vi-keys and numeric keypad inputs.
3. Fog of war toggle (f) now implemented and visually rendered.
4. Added 'm' key to show monster list with directional info from PC.
5. Stairs (<, >) now regenerate new dungeons when used by PC.
6. Dungeon regeneration fully resets rooms, monsters, and player position.
